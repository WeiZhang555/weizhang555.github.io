<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全 on 长弓二十九</title>
    <link>https://weizhang555.github.io/tags/%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in 安全 on 长弓二十九</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2021 Zhang Wei</copyright>
    <lastBuildDate>Wed, 11 Dec 2019 11:30:46 +0800</lastBuildDate><atom:link href="https://weizhang555.github.io/tags/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker-runc主机逃逸漏洞复现：CVE-2019-5736</title>
      <link>https://weizhang555.github.io/post/runc-host-escape-cve/</link>
      <pubDate>Wed, 11 Dec 2019 11:30:46 +0800</pubDate>
      
      <guid>https://weizhang555.github.io/post/runc-host-escape-cve/</guid>
      <description>
        
          
            CVE-2019-5736是一个比较知名的runc漏洞，利用方式简单，危害很大，经常被拿来做云原生安全的攻击/防御演示。
我最近也研究了下这个漏洞的使用，研究的第一步首先是复现。
尝试了github上的示例： https://github.com/Frichetten/CVE-2019-5736-PoC ， 这里对源码做了一些修改，在下面分享一下。
注意：ubuntu上安装的docker 18.06似乎已经打上了补丁，我手动编译了runc的1.0.0-rc5版本才成功复现。
复现方式：
在一个terminal里面：
1zhangwei@zhangwei-ubuntu-vm:~/program/gocode/src/github.com/Frichetten/CVE-2019-5736-PoC$ docker run -ti -v $PWD/exploit:/exploit ubuntu:18.04 bash 另一个terminal内执行：
1$ docker exec -ti 5b28d7ab5083 /bin/sh 此时第一个terminal的打印：
1zhangwei@zhangwei-ubuntu-vm:~/program/gocode/src/github.com/Frichetten/CVE-2019-5736-PoC$ docker run -ti -v $PWD/exploit:/exploit ubuntu:18.04 bash 2root@5b28d7ab5083:/# /exploit 3[+] Overwritten /bin/sh successfully 4[+] Found the PID: 17 5[+] Successfully got the file handle 6[-]Failed to open /proc/self/fd/3: open /proc/self/fd/3: text file busy 7[+] Successfully got write handle &amp;amp;{0xc0000501e0} 8root@5b28d7ab5083:/# /tmp/下多了一个passwd文件。
Ubuntu下面没有原demo里使用的/etc/shadow文件，所以我修改成了/etc/passwd，会被copy到/tmp/目录下。
修改过的源码：
          
          
        
      </description>
    </item>
    
    <item>
      <title>Docker官方镜像签名方案：Notary</title>
      <link>https://weizhang555.github.io/post/notary-intro/</link>
      <pubDate>Tue, 11 Dec 2018 11:20:00 +0800</pubDate>
      
      <guid>https://weizhang555.github.io/post/notary-intro/</guid>
      <description>
        
          
            1. TUF 1.1 背景 1.2 TUF的角色 1.2 TUF的工作流 step 0: 加载可信的root元数据文件 step 1: 更新root元数据文件 step 2: 下载timestamp元数据文件 step 3：下载snapshot元数据文件 step 4：下载最顶层的targets元数据 step 5：对照target元数据验证target 2. Notary 2.1 介绍 2.2 目标 2.3 Notary的密钥管理 3. Docker Content Trust本地测试 3.1 环境准备 3.2 push的镜像无签名的情况 3.3 push有签名的版本 3.4 恶意用户上传恶意镜像，覆盖ubuntu:18.04 3.5 docker content trust的问题 1. TUF 1.1 背景 TUF是Tor项目设计出的一套安全分发软件更新的框架，Notary是TUF框架的go语言实现，而Docker Content Trust是TUF框架的应用。理清三者关系有助于后续理解。
1.2 TUF的角色 TUF框架包含五类角色，对应五把密钥，分别是Root, Target, Snapshot, Timestamp, Delegated target(可选)，每个角色对应一个元数据文件及一把密钥。
TUF角色和密钥的理解与Notary介绍有重合，可以参考 &amp;quot;2.3 Notary的密钥管理&amp;quot;
1.2 TUF的工作流 TUF框架的定义在这里：https://github.com/theupdateframework/specification/blob/master/tuf-spec.md 。
          
          
        
      </description>
    </item>
    
    <item>
      <title>Kata Containers介绍，附上演讲ppt</title>
      <link>https://weizhang555.github.io/post/kata-containers-introduction/</link>
      <pubDate>Sun, 08 Apr 2018 22:00:00 +0800</pubDate>
      
      <guid>https://weizhang555.github.io/post/kata-containers-introduction/</guid>
      <description>
        
          
            最近在51cto举办的meetup上做了关于Kata Containers的演讲， KataContainers是github上的新项目，前身是Intel的clear container和Hyper的runv， 融合了普通容器的轻快和虚拟机的高隔离高安全性的优点。
详细可以直接参观Kata Containers的github主页： https://github.com/kata-containers/runtime
演讲的链接传送门：http://developer.huawei.com/ict/forum/thread-48823.html
完整的演讲ppt可以在此处下载： Kata介绍与Huawei_iSula安全容器-张伟.ppt
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
